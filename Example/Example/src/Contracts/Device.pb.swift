// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Corresponds to the device being used by the customer. Holds the respective details for the device under use.
struct Device {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Operating system of the device.
  /// Sample values: "iOS", "Android".
  var operatingSystem: String = String()

  ///
  /// Version of the Operating system.
  /// Sample values: "29", "15.1".
  var operatingSystemVersion: String = String()

  ///
  /// Device manufacturer name.
  /// Sample values: "Samsung", "HMD Global", "Apple"
  var deviceMake: String = String()

  ///
  /// Device model information.
  /// Sample values: "iPhone 11", "Samsung M90".
  var deviceModel: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operating_system"),
    2: .standard(proto: "operating_system_version"),
    3: .standard(proto: "device_make"),
    4: .standard(proto: "device_model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.operatingSystem)
      case 2: try decoder.decodeSingularStringField(value: &self.operatingSystemVersion)
      case 3: try decoder.decodeSingularStringField(value: &self.deviceMake)
      case 4: try decoder.decodeSingularStringField(value: &self.deviceModel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operatingSystem.isEmpty {
      try visitor.visitSingularStringField(value: self.operatingSystem, fieldNumber: 1)
    }
    if !self.operatingSystemVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.operatingSystemVersion, fieldNumber: 2)
    }
    if !self.deviceMake.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceMake, fieldNumber: 3)
    }
    if !self.deviceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Device, rhs: Device) -> Bool {
    if lhs.operatingSystem != rhs.operatingSystem {return false}
    if lhs.operatingSystemVersion != rhs.operatingSystemVersion {return false}
    if lhs.deviceMake != rhs.deviceMake {return false}
    if lhs.deviceModel != rhs.deviceModel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
