// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: User.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "User.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(App);
GPBObjCClassDeclaration(Device);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(User);

#pragma mark - UserRoot

@implementation UserRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription UserRoot_FileDescription = {
  .package = NULL,
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - User

@implementation User

@dynamic guid;
@dynamic name;
@dynamic age;
@dynamic gender;
@dynamic phoneNumber;
@dynamic email;
@dynamic hasApp, app;
@dynamic hasDevice, device;
@dynamic hasDeviceTimestamp, deviceTimestamp;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  int32_t age;
  NSString *guid;
  NSString *name;
  NSString *gender;
  NSString *email;
  App *app;
  Device *device;
  GPBTimestamp *deviceTimestamp;
  int64_t phoneNumber;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "guid",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Guid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, guid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Age,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, age),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Gender,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Email,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "app",
        .dataTypeSpecific.clazz = GPBObjCClass(App),
        .number = User_FieldNumber_App,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "device",
        .dataTypeSpecific.clazz = GPBObjCClass(Device),
        .number = User_FieldNumber_Device,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceTimestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = User_FieldNumber_DeviceTimestamp,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, deviceTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(User)
                                   messageName:@"User"
                               fileDescription:&UserRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
