// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: clickstream/internal/Health.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Clickstream_Internal_HealthDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Array of event guids.
  var eventGuids: [String] = []

  /// Array of event batch guids.
  var eventBatchGuids: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Clickstream_Internal_ErrorDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Clickstream_Internal_TraceDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeToConnection: String = String()

  var errorDetails: Clickstream_Internal_ErrorDetails {
    get {return _errorDetails ?? Clickstream_Internal_ErrorDetails()}
    set {_errorDetails = newValue}
  }
  /// Returns true if `errorDetails` has been explicitly set.
  var hasErrorDetails: Bool {return self._errorDetails != nil}
  /// Clears the value of `errorDetails`. Subsequent reads from it will return its default value.
  mutating func clearErrorDetails() {self._errorDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _errorDetails: Clickstream_Internal_ErrorDetails? = nil
}

struct Clickstream_Internal_Health {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the health event.
  var eventName: String = String()

  /// Health details, captured by the SDK when the mode is verbose.
  var healthDetails: Clickstream_Internal_HealthDetails {
    get {return _healthDetails ?? Clickstream_Internal_HealthDetails()}
    set {_healthDetails = newValue}
  }
  /// Returns true if `healthDetails` has been explicitly set.
  var hasHealthDetails: Bool {return self._healthDetails != nil}
  /// Clears the value of `healthDetails`. Subsequent reads from it will return its default value.
  mutating func clearHealthDetails() {self._healthDetails = nil}

  /// Number of events tracked.
  var numberOfEvents: Int64 = 0

  /// Number of event batches tracked.
  var numberOfBatches: Int64 = 0

  /// Tracks the error details for the event
  var errorDetails: Clickstream_Internal_ErrorDetails {
    get {return _errorDetails ?? Clickstream_Internal_ErrorDetails()}
    set {_errorDetails = newValue}
  }
  /// Returns true if `errorDetails` has been explicitly set.
  var hasErrorDetails: Bool {return self._errorDetails != nil}
  /// Clears the value of `errorDetails`. Subsequent reads from it will return its default value.
  mutating func clearErrorDetails() {self._errorDetails = nil}

  /// Tracks the traces
  var traceDetails: Clickstream_Internal_TraceDetails {
    get {return _traceDetails ?? Clickstream_Internal_TraceDetails()}
    set {_traceDetails = newValue}
  }
  /// Returns true if `traceDetails` has been explicitly set.
  var hasTraceDetails: Bool {return self._traceDetails != nil}
  /// Clears the value of `traceDetails`. Subsequent reads from it will return its default value.
  mutating func clearTraceDetails() {self._traceDetails = nil}

  /// Note: Auto-filled by the Clickstream SDK, need not be set by the products for every event! If set, will be overridden.
  var eventTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _eventTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_eventTimestamp = newValue}
  }
  /// Returns true if `eventTimestamp` has been explicitly set.
  var hasEventTimestamp: Bool {return self._eventTimestamp != nil}
  /// Clears the value of `eventTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearEventTimestamp() {self._eventTimestamp = nil}

  /// Note: Auto-filled by the Clickstream SDK, need not be set by the products for every event! If set, will be overridden.
  var healthMeta: Clickstream_Internal_HealthMeta {
    get {return _healthMeta ?? Clickstream_Internal_HealthMeta()}
    set {_healthMeta = newValue}
  }
  /// Returns true if `healthMeta` has been explicitly set.
  var hasHealthMeta: Bool {return self._healthMeta != nil}
  /// Clears the value of `healthMeta`. Subsequent reads from it will return its default value.
  mutating func clearHealthMeta() {self._healthMeta = nil}

  /// Note: Auto-filled by the Clickstream SDK, need not be set by the products for every event! If set, will be overridden.
  var deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deviceTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deviceTimestamp = newValue}
  }
  /// Returns true if `deviceTimestamp` has been explicitly set.
  var hasDeviceTimestamp: Bool {return self._deviceTimestamp != nil}
  /// Clears the value of `deviceTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearDeviceTimestamp() {self._deviceTimestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _healthDetails: Clickstream_Internal_HealthDetails? = nil
  fileprivate var _errorDetails: Clickstream_Internal_ErrorDetails? = nil
  fileprivate var _traceDetails: Clickstream_Internal_TraceDetails? = nil
  fileprivate var _eventTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _healthMeta: Clickstream_Internal_HealthMeta? = nil
  fileprivate var _deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "clickstream.internal"

extension Clickstream_Internal_HealthDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HealthDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_guids"),
    2: .standard(proto: "event_batch_guids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.eventGuids)
      case 2: try decoder.decodeRepeatedStringField(value: &self.eventBatchGuids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventGuids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.eventGuids, fieldNumber: 1)
    }
    if !self.eventBatchGuids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.eventBatchGuids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Clickstream_Internal_HealthDetails, rhs: Clickstream_Internal_HealthDetails) -> Bool {
    if lhs.eventGuids != rhs.eventGuids {return false}
    if lhs.eventBatchGuids != rhs.eventBatchGuids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clickstream_Internal_ErrorDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.reason)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Clickstream_Internal_ErrorDetails, rhs: Clickstream_Internal_ErrorDetails) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clickstream_Internal_TraceDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TraceDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_to_connection"),
    2: .standard(proto: "error_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.timeToConnection)
      case 2: try decoder.decodeSingularMessageField(value: &self._errorDetails)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timeToConnection.isEmpty {
      try visitor.visitSingularStringField(value: self.timeToConnection, fieldNumber: 1)
    }
    if let v = self._errorDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Clickstream_Internal_TraceDetails, rhs: Clickstream_Internal_TraceDetails) -> Bool {
    if lhs.timeToConnection != rhs.timeToConnection {return false}
    if lhs._errorDetails != rhs._errorDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clickstream_Internal_Health: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Health"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_name"),
    2: .same(proto: "healthDetails"),
    3: .standard(proto: "number_of_events"),
    4: .standard(proto: "number_of_batches"),
    5: .standard(proto: "error_details"),
    6: .standard(proto: "trace_details"),
    101: .standard(proto: "event_timestamp"),
    103: .same(proto: "healthMeta"),
    104: .standard(proto: "device_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.eventName)
      case 2: try decoder.decodeSingularMessageField(value: &self._healthDetails)
      case 3: try decoder.decodeSingularInt64Field(value: &self.numberOfEvents)
      case 4: try decoder.decodeSingularInt64Field(value: &self.numberOfBatches)
      case 5: try decoder.decodeSingularMessageField(value: &self._errorDetails)
      case 6: try decoder.decodeSingularMessageField(value: &self._traceDetails)
      case 101: try decoder.decodeSingularMessageField(value: &self._eventTimestamp)
      case 103: try decoder.decodeSingularMessageField(value: &self._healthMeta)
      case 104: try decoder.decodeSingularMessageField(value: &self._deviceTimestamp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventName.isEmpty {
      try visitor.visitSingularStringField(value: self.eventName, fieldNumber: 1)
    }
    if let v = self._healthDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.numberOfEvents != 0 {
      try visitor.visitSingularInt64Field(value: self.numberOfEvents, fieldNumber: 3)
    }
    if self.numberOfBatches != 0 {
      try visitor.visitSingularInt64Field(value: self.numberOfBatches, fieldNumber: 4)
    }
    if let v = self._errorDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._traceDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._eventTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }
    if let v = self._healthMeta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
    }
    if let v = self._deviceTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Clickstream_Internal_Health, rhs: Clickstream_Internal_Health) -> Bool {
    if lhs.eventName != rhs.eventName {return false}
    if lhs._healthDetails != rhs._healthDetails {return false}
    if lhs.numberOfEvents != rhs.numberOfEvents {return false}
    if lhs.numberOfBatches != rhs.numberOfBatches {return false}
    if lhs._errorDetails != rhs._errorDetails {return false}
    if lhs._traceDetails != rhs._traceDetails {return false}
    if lhs._eventTimestamp != rhs._eventTimestamp {return false}
    if lhs._healthMeta != rhs._healthMeta {return false}
    if lhs._deviceTimestamp != rhs._deviceTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
