// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: odpf/raccoon/EventRequest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
///`EventRequest` defines the contract to push events to Raccoon
///
///An `EventRequest` allows you to push more than one events(batch). The events
///are wrapped inside `events` repeated field. All of the fields on `EventRequest`
///are required.
struct Odpf_Raccoon_EventRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  ///`req_guid` is unique identifier of the request the client is making.
  ///
  ///Raccoon uses the identifier to send response of the request. The client can handle the
  ///response accordingly. For example, the client can retry the request in case the response is
  ///giving `INTERNAL_ERROR` code with "publisher failed" reason.
  ///
  ///This identifier is necessary because on event-based protocols like WebSocket the response is
  ///returned asynchronously. If there is no identifier, no way the client can tell which response
  ///belongs to which request.
  ///
  ///Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
  ///debug logs with `ReqGUID` keyword.
  var reqGuid: String = String()

  ///
  ///`sent_time` defines the time the request is sent.
  ///
  ///`sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
  ///request is sent until the events are published.
  var sentTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _sentTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_sentTime = newValue}
  }
  /// Returns true if `sentTime` has been explicitly set.
  var hasSentTime: Bool {return self._sentTime != nil}
  /// Clears the value of `sentTime`. Subsequent reads from it will return its default value.
  mutating func clearSentTime() {self._sentTime = nil}

  ///
  ///`events` is where the client put all the events wrapped in `Event`.
  ///
  ///As mentioned above, the request allows the client to push more than one event. Normally you want to batch
  ///the events to optimize the network call. 
  var events: [Odpf_Raccoon_Event] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sentTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "odpf.raccoon"

extension Odpf_Raccoon_EventRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "req_guid"),
    2: .standard(proto: "sent_time"),
    3: .same(proto: "events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.reqGuid)
      case 2: try decoder.decodeSingularMessageField(value: &self._sentTime)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.events)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reqGuid.isEmpty {
      try visitor.visitSingularStringField(value: self.reqGuid, fieldNumber: 1)
    }
    if let v = self._sentTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Odpf_Raccoon_EventRequest, rhs: Odpf_Raccoon_EventRequest) -> Bool {
    if lhs.reqGuid != rhs.reqGuid {return false}
    if lhs._sentTime != rhs._sentTime {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
