// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: odpf/raccoon/EventResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Odpf_Raccoon_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownStatus // = 0
  case success // = 1
  case error // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownStatus
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownStatus
    case 1: self = .success
    case 2: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownStatus: return 0
    case .success: return 1
    case .error: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Odpf_Raccoon_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Odpf_Raccoon_Status] = [
    .unknownStatus,
    .success,
    .error,
  ]
}

#endif  // swift(>=4.2)

enum Odpf_Raccoon_Code: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///
  ///`UNQKNOWN_CODE` indicates no appropriate/existing code can describe it.
  case unknownCode // = 0

  ///
  ///`OK` indicates the request is processed successfully.
  case ok // = 1

  ///
  ///`BAD_REQUEST` indicates there is something wrong with the request.
  case badRequest // = 2

  ///
  ///`INTERNAL_ERROR` indicates that Raccoon encountered an unexpected condition that prevented it from fulfilling the request.
  case internalError // = 3

  ///
  ///`MAX_CONNECTION_LIMIT_REACHED` indicates that Raccoon is unable to accepts new connection due to max connection is reached.
  ///
  ///To prevent Raccoon from eating up resources, connection limit needs to be set. The limit is configurable on Raccoon by setting `SERVER_WEBSOCKET_MAX_CONN`
  case maxConnectionLimitReached // = 4

  ///
  ///`MAX_USER_LIMIT_REACHED` indicates that existing connection with the same ID.
  ///
  ///Raccoon ensures unique connection using unique identifier passed from the header 
  ///the first time Websocket connection is established. The header key that
  ///contains unique identifier is configurable on Raccoon by setting `SERVER_WEBSOCKET_CONN_UNIQ_ID_HEADER`
  case maxUserLimitReached // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownCode
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCode
    case 1: self = .ok
    case 2: self = .badRequest
    case 3: self = .internalError
    case 4: self = .maxConnectionLimitReached
    case 5: self = .maxUserLimitReached
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownCode: return 0
    case .ok: return 1
    case .badRequest: return 2
    case .internalError: return 3
    case .maxConnectionLimitReached: return 4
    case .maxUserLimitReached: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Odpf_Raccoon_Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Odpf_Raccoon_Code] = [
    .unknownCode,
    .ok,
    .badRequest,
    .internalError,
    .maxConnectionLimitReached,
    .maxUserLimitReached,
  ]
}

#endif  // swift(>=4.2)

struct Odpf_Raccoon_EventResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  ///`status` denotes status of the request.
  ///
  ///Only 3 values are valid. `SUCCESS` means the the request is processed
  ///successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS` 
  ///means Raccoon unable to determine whether the request is success or not.
  var status: Odpf_Raccoon_Status = .unknownStatus

  ///
  ///`code` gives more detail of what happened to the request.
  ///
  ///Details of available `code` can be seen below.
  var code: Odpf_Raccoon_Code = .unknownCode

  ///
  ///`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
  var sentTime: Int64 = 0

  ///
  ///`reason` is additional-human readable information to provide more context to `status` and `code`.
  ///
  ///There is no predefined structure for this. The value is arbitrary.
  var reason: String = String()

  ///
  ///`data` is arbitrary extra metadata.
  ///
  ///Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
  ///of `data`. The client may fetch req_guid as key to get the `req_guid` value.
  var data: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "odpf.raccoon"

extension Odpf_Raccoon_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_STATUS"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR"),
  ]
}

extension Odpf_Raccoon_Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CODE"),
    1: .same(proto: "OK"),
    2: .same(proto: "BAD_REQUEST"),
    3: .same(proto: "INTERNAL_ERROR"),
    4: .same(proto: "MAX_CONNECTION_LIMIT_REACHED"),
    5: .same(proto: "MAX_USER_LIMIT_REACHED"),
  ]
}

extension Odpf_Raccoon_EventResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .standard(proto: "sent_time"),
    4: .same(proto: "reason"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularEnumField(value: &self.code)
      case 3: try decoder.decodeSingularInt64Field(value: &self.sentTime)
      case 4: try decoder.decodeSingularStringField(value: &self.reason)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknownStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.code != .unknownCode {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 2)
    }
    if self.sentTime != 0 {
      try visitor.visitSingularInt64Field(value: self.sentTime, fieldNumber: 3)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Odpf_Raccoon_EventResponse, rhs: Odpf_Raccoon_EventResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.sentTime != rhs.sentTime {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
